openapi: 3.0.3
info:
  title: Hakanai API
  description: Zero-knowledge one-time secret sharing service
  version: 2.14.0
  contact:
    url: https://github.com/czerwonk/hakanai
  license:
    name: Apache 2.0
    url: https://github.com/czerwonk/hakanai/blob/main/LICENSE
servers:
  - url: "https://hakanai.link/api/v1"
    description: Hakanai server
    variables:
      protocol:
        enum:
          - http
          - https
        default: https
      host:
        default: hakanai.link
paths:
  /api/v1/secret:
    post:
      summary: Create a new secret
      description: Creates a new one-time secret with optional expiration and access restrictions. All encryption happens client-side. Access restrictions can limit which IP addresses, countries, and/or ASNs can retrieve the secret.
      operationId: createSecret
      security:
        - {}
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecretRequest"
            examples:
              basic:
                summary: Basic secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
              ip_restricted:
                summary: IP-restricted secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    allowed_ips:
                      - 192.168.1.0/24
                      - 10.0.0.100
              geo_restricted:
                summary: Geo-restricted secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    allowed_countries:
                      - US
                      - DE
                      - CA
              fully_restricted:
                summary: IP and geo-restricted secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    allowed_ips:
                      - 192.168.1.0/24
                      - 10.0.0.100
                    allowed_countries:
                      - US
                      - DE
              asn_restricted:
                summary: ASN-restricted secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    allowed_asns:
                      - 13335
                      - 15169
                      - 32934
              passphrase_restricted:
                summary: Passphrase-protected secret
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    passphrase_hash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
              comprehensive_restricted:
                summary: Fully restricted secret (IP, geo, ASN, passphrase)
                value:
                  data: bXkgc2VjcmV0IG1lc3NhZ2U=
                  expires_in: 3600
                  restrictions:
                    allowed_ips:
                      - 2001:678:1e0::/48
                    allowed_countries:
                      - DE
                    allowed_asns:
                      - 202739
                    passphrase_hash: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
      responses:
        "200":
          description: Secret created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateSecretResponse"
              example:
                id: 550e8400-e29b-41d4-a716-446655440000
        "400":
          description: Bad request - invalid JSON or missing required fields
          content:
            text/plain:
              schema:
                type: string
        "401":
          description: Unauthorized - missing or invalid authentication token
          content:
            text/plain:
              schema:
                type: string
        "501":
          description: Feature not supported - e.g. country/ASN restrictions requested but server has no geo detection configured
          content:
            text/plain:
              schema:
                type: string
  /api/v1/secret/{id}:
    get:
      summary: Retrieve a secret
      description: Retrieves a one-time secret by ID. The secret is deleted after retrieval. If the secret has access restrictions, the request must come from an allowed IP address, country, and/or ASN, and include the correct passphrase hash if required.
      operationId: getSecret
      parameters:
        - name: id
          in: path
          required: true
          description: UUID of the secret to retrieve
          schema:
            type: string
            format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        - name: X-Secret-Passphrase
          in: header
          required: false
          description: SHA-256 hash of the passphrase (if the secret is passphrase-protected). Required only for secrets created with passphrase restrictions.
          schema:
            type: string
            pattern: ^[a-fA-F0-9]{64}$
          example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
      responses:
        "200":
          description: Secret retrieved successfully
          content:
            text/plain:
              schema:
                type: string
                description: Base64-encoded secret data
              example: bXkgc2VjcmV0IG1lc3NhZ2U=
        "401":
          description: Unauthorized - missing or incorrect passphrase
          content:
            text/plain:
              schema:
                type: string
              examples:
                missing_passphrase:
                  summary: Missing required passphrase
                  value: Missing required passphrase to access the secret
                wrong_passphrase:
                  summary: Incorrect passphrase
                  value: Not allowed to access the secret
        "403":
          description: Forbidden - access denied due to unmet restrictions (e.g. IP, country, or ASN)
          content:
            text/plain:
              schema:
                type: string
        "404":
          description: Secret not found or has expired
          content:
            text/plain:
              schema:
                type: string
        "410":
          description: Secret has already been accessed and deleted
          content:
            text/plain:
              schema:
                type: string
  /api/v1/admin/tokens:
    post:
      summary: Create a new user token
      description: Creates a new user token with optional size limit and TTL. Requires admin authentication.
      operationId: createUserToken
      security:
        - adminAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTokenRequest"
            examples:
              basic:
                summary: Basic token creation
                value:
                  upload_size_limit: 1048576
                  ttl_seconds: 2592000
      responses:
        "200":
          description: Token created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateTokenResponse"
              example:
                token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
        "400":
          description: Bad request - invalid JSON or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "401":
          description: Unauthorized - missing or invalid admin token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
              example:
                error: Invalid admin token
        "500":
          description: Internal server error - failed to create token
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
components:
  schemas:
    CreateSecretRequest:
      type: object
      required:
        - data
        - expires_in
      properties:
        data:
          type: string
          description: Base64-encoded secret data (encrypted client-side)
          example: bXkgc2VjcmV0IG1lc3NhZ2U=
        expires_in:
          type: integer
          minimum: 1
          maximum: 604800
          description: TTL in seconds (max 7 days)
          example: 3600
        restrictions:
          $ref: "#/components/schemas/SecretRestrictions"
    CreateSecretResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the created secret
          example: 550e8400-e29b-41d4-a716-446655440000
    CreateTokenRequest:
      type: object
      required:
        - ttl_seconds
      properties:
        upload_size_limit:
          type: integer
          minimum: 1
          description: Optional upload size limit in bytes for the token
          example: 1048576
        ttl_seconds:
          type: integer
          minimum: 1
          description: Token time-to-live in seconds
          example: 2592000
    CreateTokenResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: The generated authentication token
          example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...
    SecretRestrictions:
      type: object
      description: Access restrictions for a secret
      properties:
        allowed_ips:
          type: array
          items:
            type: string
            pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\/([0-9]|[1-2][0-9]|3[0-2]))?|(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}(?:\/([0-9]|[1-9][0-9]|1[01][0-9]|12[0-8]))?|::1(?:\/128)?$
          description: Optional list of IP addresses or CIDR ranges that are allowed to retrieve this secret. Supports both IPv4 and IPv6. Single IPs are automatically converted to /32 (IPv4) or /128 (IPv6).
          example:
            - 192.168.1.0/24
            - 10.0.0.100
            - 2001:db8::/32
            - "::1"
        allowed_countries:
          type: array
          items:
            type: string
            pattern: ^[A-Z]{2}$
            minLength: 2
            maxLength: 2
          description: Optional list of ISO 3166-1 alpha-2 country codes that are allowed to retrieve this secret. Must be exactly 2 uppercase letters. Requires server-side country detection configuration.
          example:
            - US
            - DE
            - CA
            - GB
            - FR
            - JP
        allowed_asns:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 4294967295
          description: Optional list of Autonomous System Numbers (ASNs) that are allowed to retrieve this secret. ASNs must be valid 32-bit unsigned integers (0 to 4294967295). Requires server-side ASN detection configuration.
          example:
            - 13335
            - 15169
            - 32934
            - 16509
        passphrase_hash:
          type: string
          pattern: ^[a-fA-F0-9]{64}$
          description: Optional SHA-256 hash of a passphrase required to access this secret. The hash must be exactly 64 hexadecimal characters. Clients must provide the same hash in the X-Secret-Passphrase header when retrieving the secret.
          example: 5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: Authentication token (if required by server configuration)
    adminAuth:
      type: http
      scheme: bearer
      description: Admin authentication token (required for admin operations)
tags: []
