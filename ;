//! Admin API endpoints for token management.
//!
//! Provides REST endpoints for administrative operations like creating user tokens.
//! All endpoints require admin token authentication.

use std::time::Duration;

use actix_web::{web, HttpRequest, HttpResponse, Result};
use tracing::info;

use hakanai_lib::models::{CreateTokenRequest, CreateTokenResponse};

use crate::app_data::AppData;
use crate::token::{TokenData, TokenError};

/// Configure admin API routes
pub fn configure_routes(cfg: &mut web::ServiceConfig) {
    cfg.service(
        web::scope("/admin")
            .route("/tokens", web::post().to(create_token))
    );
}

/// Extract and validate admin token from Authorization header
async fn authenticate_admin(req: &HttpRequest, app_data: &web::Data<AppData>) -> Result<(), TokenError> {
    let auth_header = req
        .headers()
        .get("Authorization")
        .and_then(|h| h.to_str().ok())
        .ok_or(TokenError::InvalidToken)?;

    let token = auth_header
        .strip_prefix("Bearer ")
        .ok_or(TokenError::InvalidToken)?;

    app_data.token_validator.validate_admin_token(token).await
}

/// Create a new user token
/// 
/// POST /admin/tokens
/// 
/// Requires admin authentication via Authorization header.
/// Creates a new user token with optional size limit and TTL.
pub async fn create_token(
    req: HttpRequest,
    request: web::Json<CreateTokenRequest>,
    app_data: web::Data<AppData>,
) -> Result<HttpResponse> {
    // Authenticate admin token
    if authenticate_admin(&req, &app_data).await.is_err() {
        return Ok(HttpResponse::Unauthorized().json(serde_json::json!({
            "error": "Invalid admin token"
        })));
    }

    let token_data = TokenData {
        upload_size_limit: request.upload_size_limit,
    };

    let ttl_seconds = request.ttl_seconds;
    let ttl = Duration::from_secs(ttl_seconds);

    let token = match app_data.token_creator.create_user_token(token_data, ttl).await {
        Ok(token) => token,
        Err(e) => {
            return Ok(HttpResponse::InternalServerError().json(serde_json::json!({
                "error": format!("Failed to create token: {}", e)
            })));
        }
    };

    info!("Admin created new user token with TTL: {}s", ttl_seconds);

    let response = CreateTokenResponse {
        token,
    };

    Ok(HttpResponse::Ok().json(response))
}
